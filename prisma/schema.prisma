generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Modelos base necesarios para el proyecto
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Modelos convertidos del diagrama dbdiagram.io
model User {
    id                 String               @id @default(uuid()) @db.VarChar(36)
    username           String?               @unique
    email              String               @unique
    password           String?
    created_at         DateTime             @default(now())
    profile_picture_url String?
    language_preference String?
    timezone           String?
    name               String?
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    tasks              Task[]
    projects           Project[]
    tags               Tag[]
    notifications      Notification[]
    activityLogs       ActivityLog[]
    settings           Setting[]
    collaborations     ProjectCollaborator[]
}

model Task {
    id              Int           @id @default(autoincrement())
    user_id         String
    title           String
    description     String?
    due_date        DateTime?
    status          String?
    priority        Int           @default(0)
    created_at      DateTime      @default(now())
    updated_at      DateTime      @default(now())
    completed_at    DateTime?
    user            User          @relation(fields: [user_id], references: [id])
    subtasks        Subtask[]
    taskProjects    TaskProject[]
    taskTags        TaskTag[]
    reminders       Reminder[]
    notifications   Notification[]
    aiPriorities    AI_Priority[]
    activityLogs    ActivityLog[]
}

model Subtask {
    id       Int     @id @default(autoincrement())
    task_id  Int
    title    String
    status   String?
    task     Task    @relation(fields: [task_id], references: [id])
}

model Project {
    id           Int                   @id @default(autoincrement())
    user_id      String
    name         String
    description  String?
    created_at   DateTime              @default(now())
    completed_at DateTime?
    user         User                  @relation(fields: [user_id], references: [id])
    taskProjects TaskProject[]
    tags         Tag[]
    collaborators ProjectCollaborator[]
}

model TaskProject {
    task_id    Int
    project_id Int
    task       Task    @relation(fields: [task_id], references: [id])
    project    Project @relation(fields: [project_id], references: [id])

    @@id([task_id, project_id])
}

model Tag {
    id         Int       @id @default(autoincrement())
    user_id    String
    project_id Int?
    name       String
    color      String
    user       User      @relation(fields: [user_id], references: [id])
    project    Project?  @relation(fields: [project_id], references: [id])
    taskTags   TaskTag[]
}

model TaskTag {
    task_id Int
    tag_id  Int
    task    Task @relation(fields: [task_id], references: [id])
    tag     Tag  @relation(fields: [tag_id], references: [id])

    @@id([task_id, tag_id])
}

model ProjectCollaborator {
    id            Int      @id @default(autoincrement())
    project_id    Int
    user_id       String
    role          String?
    added_at      DateTime @default(now())
    project       Project  @relation(fields: [project_id], references: [id])
    user          User     @relation(fields: [user_id], references: [id])

    @@unique([project_id, user_id])
}

model Reminder {
    id             Int      @id @default(autoincrement())
    task_id        Int
    reminder_time  DateTime
    reminder_type  String?
    task           Task     @relation(fields: [task_id], references: [id])
}

model Notification {
    id                Int      @id @default(autoincrement())
    user_id           String
    task_id           Int
    notification_type String?
    message           String
    created_at        DateTime @default(now())
    user              User     @relation(fields: [user_id], references: [id])
    task              Task     @relation(fields: [task_id], references: [id])
}

model AI_Priority {
    id                 Int       @id @default(autoincrement())
    task_id            Int
    urgency_score      Int
    importance_score   Int
    predicted_due_date DateTime?
    task               Task      @relation(fields: [task_id], references: [id])
}

model ActivityLog {
    id        Int      @id @default(autoincrement())
    user_id   String
    task_id   Int
    action    String
    timestamp DateTime @default(now())
    user      User     @relation(fields: [user_id], references: [id])
    task      Task     @relation(fields: [task_id], references: [id])
}

model Setting {
    id      Int    @id @default(autoincrement())
    user_id String
    key     String
    value   String
    user    User   @relation(fields: [user_id], references: [id])
}